name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy repository to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "~/repo"
      
      - name: Check and install Docker and Docker Compose if needed
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if ! docker-compose --version > /dev/null 2>&1; then
              echo "docker-compose not found, installing Docker and Docker Compose..."
              sudo apt update -y
              sudo apt upgrade -y
              sudo apt install docker.io -y
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            else
              echo "docker-compose is already installed."
            fi

      - name: Create .env file on the server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/repo
            echo "Creating .env file..."
            cat > .env <<EOF
            WORDPRESS_DOMAIN=${{ secrets.WORDPRESS_DOMAIN }}
            WORDPRESS_DB_USER=${{ secrets.WORDPRESS_DB_USER }}
            WORDPRESS_DB_PASSWORD=${{ secrets.WORDPRESS_DB_PASSWORD }}
            WORDPRESS_DB_NAME=${{ secrets.WORDPRESS_DB_NAME }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            FTP_PASS=${{ secrets.FTP_PASS }}
            FTP_USER=${{ secrets.FTP_USER }}
            GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
            WORDPRESS_ADMIN_USER=${{ secrets.WORDPRESS_ADMIN_USER }}
            WORDPRESS_ADMIN_PASSWORD=${{ secrets.WORDPRESS_ADMIN_PASSWORD }}
            WORDPRESS_ADMIN_EMAIL=${{ secrets.WORDPRESS_ADMIN_EMAIL }}
            EOF

      - name: Generate htpasswd for Traefik dashboard
        id: generate_htpasswd
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/repo
            echo "Checking if htpasswd is installed..."
            if ! command -v htpasswd &> /dev/null; then
              echo "htpasswd not found. Installing..."
              sudo apt-get install -y apache2-utils
            else
              echo "htpasswd is already installed."
            fi
            
            echo "Generating htpasswd..."
            USERNAME=${{ secrets.TRAEFIK_USERNAME }}
            PASSWORD=${{ secrets.TRAEFIK_PASSWORD }}
            HTPASSWD=$(htpasswd -nbB $USERNAME $PASSWORD)
            echo HTPASSWD=$HTPASSWD >> .env

      - name: Execute commands over SSH
        if: steps.generate_htpasswd.outcome == 'success'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/repo
            sudo docker-compose down
            sudo docker-compose up -d --build
            sleep 30  # Attendre que WordPress soit complètement démarré

            # Installer WP-CLI dans le conteneur si ce n'est pas déjà fait
            sudo docker exec wordpress curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            sudo docker exec wordpress chmod +x wp-cli.phar
            sudo docker exec wordpress mv wp-cli.phar /usr/local/bin/wp

            # Vérifier si WordPress est déjà installé
            if sudo docker exec wordpress wp core is-installed --allow-root; then
              echo "WordPress is already installed, skipping installation."
            else
              # Utiliser WP-CLI pour installer WordPress automatiquement
              sudo docker exec wordpress wp core install \
                --url="${{ secrets.WORDPRESS_DOMAIN }}" \
                --title="${{ secrets.WORDPRESS_SITE_TITLE }}" \
                --admin_user="${{ secrets.WORDPRESS_ADMIN_USER }}" \
                --admin_password="${{ secrets.WORDPRESS_ADMIN_PASSWORD }}" \
                --admin_email="${{ secrets.WORDPRESS_ADMIN_EMAIL }}" \
                --skip-email \
                --allow-root

              # Configurer l'indexabilité du site selon la variable
              if [ "${{ secrets.WORDPRESS_ENABLE_INDEXING }}" = "0" ]; then
                sudo docker exec wordpress wp option update blog_public 0 --allow-root
              else
                sudo docker exec wordpress wp option update blog_public 1 --allow-root
              fi
            fi
            
            # Boucler sur la liste des plugins et les installer
            PLUGINS="${{ secrets.WORDPRESS_PLUGINS }}"
            
            # Convertir la liste en un tableau, en séparant par les espaces
            for PLUGIN in $(echo $PLUGINS | tr " " "\n"); do
              echo "Installing plugin: $PLUGIN"
              sudo docker exec wordpress wp plugin install $PLUGIN --allow-root
            done

            # Correction des permissions des fichiers et répertoires
            sudo docker exec wordpress chown -R www-data:www-data /var/www/html
            sudo docker exec wordpress find /var/www/html -type d -exec chmod 755 {} \;
            sudo docker exec wordpress find /var/www/html -type f -exec chmod 644 {} \;
            echo "Permissions corrected."

            sudo docker-compose down
            sudo docker-compose up -d

      - name: Cleanup Env
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/repo
            rm .env
